name: CI (Build & Publish)

on:
  push:
    branches:
      - 'main'
    paths-ignore:
      - 'README.md'
  
  create:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  # buildpack builder
  BUILDER: paketobuildpacks/builder-jammy-tiny
  
jobs:
  maven-build-test:
    uses: ./.github/workflows/maven.yml  

  create-new-version:
    if: github.event_name == 'push'
    needs: maven-build-test
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Add new version to latest commit
      id: version
      shell: bash
      run: |
        git fetch --prune --unshallow --tags
        git config --global user.name 'DevOpsBot'
        git config --global user.email 'devops-bot@users.noreply.github.com'
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        RELEASE_VERSION_TAG=$(git describe --tags --match "v*" HEAD^)
        RELEASE_VERSION=$(echo ${RELEASE_VERSION_TAG} | sed 's/^v//')
        major=$(echo "$RELEASE_VERSION" | cut -d. -f1)
        minor=$(echo "$RELEASE_VERSION" | cut -d. -f2)
        patch=$(echo "$RELEASE_VERSION" | cut -d. -f3)
        new_patch=$((patch + 1))
        NEW_RELEASE_VERSION=("$major.$minor.$new_patch")
        echo Updating version from ${RELEASE_VERSION} to ${NEW_RELEASE_VERSION}
        git tag v${NEW_RELEASE_VERSION}
        git push origin v${NEW_RELEASE_VERSION}

  get-release-version:
      needs: create-new-version
      runs-on: ubuntu-latest
      outputs:
        RELEASE_TYPE: ${{ steps.version.outputs.RELEASE_VERSION_TYPE }}
        NEW_RELEASE_VERSION: ${{ steps.version.outputs.NEW_RELEASE_VERSION }}

      steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Get Version
        id: version
        shell: bash
        run: |
          git fetch --prune --unshallow --tags
          NEW_RELEASE_VERSION_TAG=$(git describe --tags --match "v*")
          NEW_RELEASE_VERSION=$(echo ${RELEASE_VERSION_TAG} | sed 's/^v//')
          echo "NEW_RELEASE_VERSION=${NEW_RELEASE_VERSION}" >> "$GITHUB_OUTPUT"
          if [ ${{github.event_name}} == 'push' ]
          then
            echo "RELEASE_TYPE='PATCH'" >> "$GITHUB_OUTPUT"
          else
            echo "RELEASE_TYPE='UPGRADE'" >> "$GITHUB_OUTPUT"
          fi
    

  build-publish:
    needs: get-release-version
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Setup Pack CLI
      uses: buildpacks/github-actions/setup-pack@v5.0.0
  
    - name: Extract Git Metadata
      shell: bash
      run: |
        echo "SHA_TAG=$(git rev-parse --short "$GITHUB_SHA")" >> "$GITHUB_ENV"
        echo "BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> "$GITHUB_ENV"

    - name: Build Image using Pack CLI
      run: |
        #!/usr/bin/env bash
        pack build ${{env.REGISTRY}}/${{env.IMAGE_NAME}}:${{env.SHA_TAG}} --path . --builder ${{env.BUILDER}}

    - name: Log into registry ${{ env.REGISTRY }}
      uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Tag & Publish Image
      run: |
        docker tag ${{env.REGISTRY}}/${{env.IMAGE_NAME}}:${{env.SHA_TAG}} ${{env.REGISTRY}}/${{env.IMAGE_NAME}}:${{needs.get-release-version.outputs.NEW_RELEASE_VERSION}}
        docker push ${{env.REGISTRY}}/${{env.IMAGE_NAME}}:${{env.SHA_TAG}}
        docker push ${{env.REGISTRY}}/${{env.IMAGE_NAME}}:${{needs.get-release-version.outputs.NEW_RELEASE_VERSION}}
    
    - name: Repository Dispatch to watchdog-config
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.WATCHDOG_CONFIG_REPO_TOKEN }}
        repository: ${{ github.actor }}/watchdog-config
        event-type: publish-pkg
        client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ env.SHA_TAG }}", "app_name": "watchdog-graphql", "image": "${{env.REGISTRY}}/${{env.IMAGE_NAME}}:${{env.SHA_TAG}}", "version": "${{needs.get-release-version.outputs.NEW_RELEASE_VERSION}}", "version_type": "${{needs.get-release-version.outputs.RELEASE_TYPE}}" }'

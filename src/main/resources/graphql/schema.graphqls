# Models
type User {
    userId: ID!
    userName: String!
    installedBots: [Bot!]!
    accounts: [Account!]
    totalExpensesPaid: [Expense]
    ownExpenses: [ExpenseSplit]
    createdAt: String!
}

type Bot {
    botId: ID!
    name: String!
    users: [User!]
    createdAt: String!
}

type Account {
    accountId: ID!
    name: String!
    users: [User!]
    expenses: [Expense]
    createdAt: String!
}

type Expense {
    id: ID!
    name: String!
    amount: Float!
    account: Account!
    paidBy: User!
    expenseSplit: [ExpenseSplit!]
    createdAt: String!
}

type ExpenseSplit {
    id: ID!
    amount: Float!
    name: String!
    expense: Expense!
    user: User!
}

type ExpenseOwed {
    user: User!
    owedAmount: Float!
}

type Context {
    chatId: ID!
    bot: Bot!
    user: User!
    account: Account!
    createdAt: String!
}

# DTO
input BotInput {
    name: String
}

input UserInput {
    userName: String
    botId: ID
}

input AccountInput {
    name: String
    userIds: [ID]
}

input ExpenseInput {
    name: String
    amount: Float
    accountId: ID
    paidByUserId: ID
    expenseSplit: [ExpenseSplitInput]
}

input ExpenseSplitInput {
    amount: Float!
    userId: ID!
}

input ContextInput {
    chatId: String!
    botId: ID!
    userId: ID!
    accountId: ID!
}

input FieldFilter {
    fieldName: String
    fieldValue: String
}

enum SortDirection {
 ASC,
 DESC
}
# UseCases
type Query {
    users(filter: [FieldFilter], sortField: String = null,
          sortDirection: SortDirection = DESC, limit: Int = 100): [User]!
    bots(filter: [FieldFilter], sortField: String = null,
         sortDirection: SortDirection = DESC, limit: Int = 100): [Bot]!
    accounts(filter: [FieldFilter], sortField: String = null,
             sortDirection: SortDirection = DESC, limit: Int = 100): [Account]!
    expenses(filter: [FieldFilter], sortField: String = null,
             sortDirection: SortDirection = DESC, limit: Int = 100): [Expense]!
    expenseOwed(accountId: ID, userId: ID): [ExpenseOwed]
    contexts(filter: [FieldFilter], sortField: String = null,
        sortDirection: SortDirection = DESC, limit: Int = 100): [Context]!
}


type Mutation {
    createBot(bot: BotInput): Bot!
    updateBot(botId: ID, bot: BotInput): Bot!
    deleteBot(botId: ID): Boolean!

    createUser(user: UserInput): User!
    updateUser(userId: ID,user: UserInput): User!
    deleteUser(userId: ID): Boolean!

    createAccount(account: AccountInput): Account!
    updateAccount(accountId: ID,account: AccountInput): Account!
    deleteAccount(accountId: ID): Boolean!

    createExpense(expense: ExpenseInput): Expense!
    updateExpense(expenseId: ID,expense: ExpenseInput): Expense!
    deleteExpense(expenseId: ID): Boolean!

    createContext(context: ContextInput): Context!
    updateContext(chatId: ID,context: ContextInput): Context!
    deleteContext(chatId: ID): Boolean!
}